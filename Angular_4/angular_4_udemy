# Angular 4 #
## Getting Started ##
### Course Introduction ###
### What is Angular? ###
1. Angular is a JavaScript Framework which allows you to develop reactive Single-Page-Application (SPAs)
	1. Single-Page-Application: One HTML file and JavaScript code
		1. Every change is rendered in the browser (does not reach out to server for every change)

### Angular vs Angular 2 vs Angular 4 ###
1. Angular 1: First version
2. Angular 2: Complete rewrite of Angular 1 and the future of Angular
3. Angular 4: Update to Angular 2 (not complete rewrite of Angular 2)

### Project Setup and First App ###
1. Angular CLI: Toolset for creation, management and building angular apps simple
	1. Commands
	2. Why use CLI? because we need mechanism for transpiling TypeScript into JavaScript which can be automated
2. Dependencies:
	1. Node.js
		1. Latest current version
	2. Install Node.js
3. Install CLI:
	1. `sudo npm install -g @angular/cli`
4. Navigate to folder
	1. `ng new my-first-app`
		1. Installs dependencies
5. Navigate into app: `cd my-first-app/`
6. Run the project: `ng serve`
	1. Server is used because Angular needs to load dependencies dynamically 

### CLI Deep Dive & Troubleshooting ###
1. [Documentation](https://github.com/angular/angular-cli/wiki)
2. Problems installing and running? Use latest versions of NodeJS, npm and CLI
3. Updating NodeJS:
	1. Download latest version
	2. Uninstalled previously installed versions
	3. Re-install lastest version
4. Updating npm: `sudo npm install -g npm`
5. Updating the CLI:
	1. `sudo npm uninstall -g angular/cli @angular/cli`
	2. `sudo npm cache clean`
	3. `sudo npm install -g @angular/cli`
6. Common issues and solutions:
	1. Creation of project takes a very long time: Windows problem so try running as administrator
	2. EADDR error (Address already in use): `ng serve --port ANOTHERPORT` or quit the previous `ng serve`
	3. Changes are not reflected in browser (App is not compiling): check if `ng serve` displays an error. If not make sure latest CLI is installed and restart CLI 

### Editing the First App ###
1. Editors:
	1. Microsoft Visual Studio Code (Great Angular support)
	2. Sublime Text
	3. Atom
2. Folder structure:
	1. `e2e`: folder for end to end testing
	2. `src`: Our files that get created
		1. `index.html`: single page that app would serve
		2. `assets`: folder for storing static assets
		3. `environments`: environment variables
		4. `app`: folder that has app files
			1. `app.component.ts`
				1. Change the title and it changes
3. Angular changes HTML code into DOM at runtime:
	1. Page source does not show the actual content
4. `app.component.html`

		<input type="text" [(ngModel)]="name">
		<p>{{ name }}</p>

5. `app.component.ts`

		export class AppComponent {
			name = '';
		}

6. Enter name and it changes dynamically

### The Course Structure ###
1. Getting Started
2. The Basics
3. Components & Databinding
4. Directives
5. Services & Dependency Injection
6. Routing
7. Observables: for asynchronous code
8. Forms
9. Pipes: for transforming output
10. Http: Used to connect to server
11. Authentication
12. Optimization & NgModules
13. Deployment
14. Animations & Testing

### How to get the Most out of the Course ###
1. Watch the Videos
2. Do the Assignments
3. Do the Course Project
	1. Try on your own first
	2. Try to expand the project
4. Ask in Q&A
5. Try to answer Q&A (most learning)
6. Docs + Google

### What is TypeScript? ###
1. More features than vanilla JS (Types, Classes, Interfaces, ...)
2. Compiled to JS (it does not run directly)
	1. CLI can be used for it

### A Basic Project Setup using Bootstrap for Styling ###
1. Empty HTML file
2. Adding Bootstrap:
	1. Navigate into project folder `npm install --save bootstrap`
	2. `.angular-cli.json`
		
			"styles": [
				"../node_modules/bootstrap/dist/css/bootstrap.min.css",
				styles.css
			]

3. `ng serve`

### Where to find the Course Source Code ###
1. Last lecture of a section:

## The Basics ##
### Module Introduction ###
1. See how angular works

### How an Angular App gets Loaded and Started ###
### Components are Important! ###
### Creation of a New Component ###
### Understanding the Role of AppModule and Component Declaration ###
### Using Custom Components ###
### Creation of Components with the CLI & Nesting Components ###
### Working with Component Templates ###
### Working with Component Styles ###
### Fully Understanding the Component Selector ###
### Assignment 1: Practicing Components ###
### What is Databinding? ###
### String Interpolation ###
### Property Binding ###
### Property Binding vs String Interpolation ###
### Event Binding ###
### Bindable Properties and Events ###
### Passing and Using Data with Event Binding ###
### Two-Way-Databinding ###
### Important: FormsModule is Required for Two-Way-Binding! ###
### Combining all Forms of Databinding ###
### Assignment 2: Practicing Databinding ###
### Understanding Directives ###
### Using ngIf to Output Data Conditionally ###
### Enhancing ngIf with an Else Condition ###
### Styling Elements Dynamically with ngStyle ###
### Applying CSS Classes Dynamically with ngStyle ###
### Outputting Lists with ngFor ###
### Assignment 3: Practicing Directives ###
### Getting the Index when using ngFor ### 

## Course Project - The Basics ##
### Project Introduction ###
### Planning the App ###
### Setting up the Application ###
### Creation of the Components ###
### Using the Components ###
### Adding a Navigation Bar ###
### Alternative Non-Collapsable Navigation Bar ###
### Creation of a "Recipe" Model ###
### Adding Content to the Recipes Components ###
### Outputting a List of Recipes with ngFor ###
### Displaying Recipe Details ###
### Working on the ShoppingListComponent ###
### Creation of an "Ingredient" Model ###
### Creation of and Outputting the Shopping List ###
### Adding a Shopping List Edit Section ###
### Wrap Up & Next Steps ###

## Debugging ##
### Understanding Angular Error Messages ###
### Debugging Code in the Browser Using Sourcemaps ###
### Using Augury to Dive into Angular Apps ###

## Components & Databinding Deep Dive ##
### Module Introduction ###
### Splitting Apps into Components ###
### Property & Event Binding Overview ###
### Binding to Custom Properties ###
### Assigning an Alias to Custom Properties ###
### Binding to Custom Events ###
### Assigning an Alias to Custom Events ###
### Custom Property and Event Binding Summary ###
### Understanding View Encapsulation ###
### More on View Encapsulation ###
### Using Local References in Templates ###
### Getting Access to the Template & DOM with `@ViewChild` ###
### Projecting Content into Components with ng-content ###
### Understanding the Component Lifecycle ###
### Seeing Lifecycle Hooks in Action ###
### Lifecycle Hooks and Template Access ###
### Getting Access to `ng-content` with `@ContentChild` ###
### Wrap Up ###
### Assignment 4: Practicing Property & Event Binding and View Encapsulation ###

## Course Project - Components & Databinding ##
### Introduction ###
### Adding Navigation with Event Binding and ngIf ###
### Passing Recipe Data with Property Binding ###
### Passing Data with Event and Property Binding (Combined) ###
### Allowing the User to Add Ingredients to the Shopping List ###

## Directives Deep Dive ##
### Module Introduction ###
### `ngFor` and `ngIf` Recap ###
### `ngClass` and `ngStyle` Recap ###
### Creation of Basic Attribute Directive ###
### Using the Renderer to Build a Better Attribute Directive ###
### More about the Renderer ###
### Using HostListener to Listen to Host Events ###
### Using HostBinding to Bind to Host Properties ###
### Binding to Directive Properties ###
### What Happens behind the Scenes on Structural Directives ###
### Building a Structural Directive ###
### Understanding `ngSwitch` ###

## Course Project - Directives ##
### Building and Using a Dropdown Directive ###

## Using Services & Dependency Injection ##
### Module Introduction ###
### Why would you Need Services? ###
### Creation of Logging Service ###
### Injecting the Logging Service into Components ###
### Creation of Data Service ###
### Understanding the Hierarchical Injector ###
### How many Instances of Service Should It Be? ###
### Injecting Services into Services ###
### Using Services for Cross-Component Communication ###
### Assignment 5: Practicing Services ###

## Course Project - Services & Dependency Injection ##
### Introduction ###
### Setting up the Services ###
### Managing Recipes in a Recipe Service ###
### Using a Service for Cross-Component Communication ###
### Adding the Shopping List Service ###
### Using Services for "Push Notifications" ###
### Adding Ingredients to Recipes ###
### Passing Ingredients from Recipes to the Shopping List (via a Service) ###

## Changing Pages with Routing ##
### Module Introduction ###
### Why do we need a Router? ###
### Understanding the Example Project ###
### Setting up and Loading Routes ###
### Navigating with Router Links ###
### Understanding Navigation Links ###
### Styling Active Router Links ###
### Navigating Programmatically ###
### Using Relative Paths in Programmatic Navigation ###
### Passing Parameters to Routes ###
### Fetching Route Parameters ###
### Fetching Route Parameters Reactively ###
### An Important Note about Route Observables ###
### Passing Query Parameters and Fragments ###
### Practicing and some Common Gotchas ###
### Setting up Child (Nested) Routes ###
### Using Query Parameters - Practice ###
### Configuring the Handling of Query Parameters ###
### Redirecting and Wildcard Routes ###
### Important: Redirection Path Matching ###
### Outsourcing the Route Configuration ###
### An Introduction to Guards ###
### Protecting Routes with `canActivate` ###
### Protecting Child (Nested) Routes with `canActivateChild` ###
### Using a Fake Auth Service ###
### Controlling Navigation with `canDeactivate` ###
### Passing Static Data to a Route ###
### Resolving Dynamic Data with the resolve Guard ###
### Understanding Location Strategies ###
### Wrap Up ###

## Course Project - Routing ##
### Planning the General Structure ###
### Setting Up Routes ###
### Adding Navigation to the App ###
### Marking Active Routes ###
### Fixing Page Reload Issues ###
### Child Routes: Challenge ###
### Adding Child Routing Together ###
### Configuring Route Parameters ###
### Passing Dynamic Parameters to Links ###
### Styling Active Recipe Items ###
### Adding Editing Routes ###
### Retrieving Route Parameters ###
### Programmatic Navigation to the Edit Page ###
### One Note about Route Observables ###
### Project Cleanup ###

## Understanding Observabes ##
### Module Introduction ###
### Analyzing a Built-in Angular Observables ###
### Building & Using a Fist Simple Observable ###
### Building & Using a Custom Observable from Scratch ###
### Unsubscribe! ###
### Where to learn more ###
### Using Subjects to Pass AND Listen to Data ###
### Understanding Observable Operators ###
### Wrap Up ###

## Course Project - Observables ##
### Improving the Reactive Service with Observables (Subjects) ###

## Handling Forms in Angular Apps ##
### Module Introduction ###
### Why do we Need Angular's Help? ###
### Template-Driven (TD) vs Reactive Approach ###
### An Example Form ###
### TD: Creation of the Form and Registering the Controls ###
### TD: Submitting and Using the Form ###
### TD: Understanding Form State ###
### TD: Accessing the Form with `@ViewChild` ###
### TD: Adding Validation to Check User Input ###
### Built-in Validators & Using HTML5 Validation ###
### TD: Using the Form State ###
### TD: Outputting Validation Error Messages ###
### TD: Set Default Values with `ngModel` Property Binding ###
### TD: Using `ngModel` with Two-Way-Binding ###
### TD: Grouping Form Controls ###
### TD: Handling Radio Buttons ###
### TD: Setting and Patching Form Values ###
### TD: Using Form Data ###
### TD: Resetting Forms ###
### Assignment 6: Practicing Template-Driven Forms ###
### Introduction to the Reactive Approach ###
### Reactive: Setup ###
### Reactive: Creation of a Form in Code ###
### Reactive: Syncing HTML and Form ###
### Reactive: Submitting the Form ###
### Reactive: Adding Validation ###
### Reactive: Getting Access to Controls ###
### Reactive: Grouping Controls ###
### Reactive: Arrays of Form Controls (FormArray) ###
### Reactive: Creation of Custom Validators ###
### Reactive: Using Error Codes ###
### Reactive: Creation of Custom Async Validator ###
### Reactive: Reacting to Status or Value Changes ###
### Reactive: Setting and Patching Values ###
### Assignment 7: Practicing Reactive Forms ###

## Course Project - Forms ##
### Introdcution ###
### TD: Adding the Shopping List Form ###
### Adding Validation to the Form ###
### Allowing the Selection of Items in the List ###
### Loading the Shopping List Items into the Form ###
### Updating existing Items ###
### Resetting the Form ###
### Allowing the User to Clear (Cancel) the Form ###
### Allowing the Deletion of Shopping List Items ###
### Creation of Template for teh (Reactive) Recipe Edit Form ###
### Creation of Form For Editing Recipes ###
### Syncing HTML with the Form ###
### Adding Ingredient Controls to a Form Array ###
### Adding new Ingredient Controls ###
### Validating User Input ###
### Submitting the Recipe Edit Form ###
### Adding a Delete and Clear (Cancel) Functionality ###
### Redirecting the User (after Deleting a Recipe) ###
### Adding an Image Preview ###
### Providing the Recipe Service Correctly ###
### Deleting Ingredients and Some Finishing Touches ###

## Using Pipes to Transform Output ##
### Introduction & Why Pipes are Useful ###
### Using Pipes ###
### Parameterizing Pipes ###
### Where to learn more about Pipes ###
### Chaining Multiple Pipes ###
### Creation of Custom Pipes ###
### Parameterizing a Custom Pipe ###
### Example: Creation of Filter Pipe ###
### Pure and Impure Pipes (or: How to "fix" the Filter Pipe) ###
### Understanding the "async" Pipe ###
### Assignment 8: Practicing Pipes ###

## Making Http Requests ##
### Introduction & How Http Requests Work in SPAs ###
### Example App & Backend Setup ###
### Sending Requests (Example: POST Request) ###
### Adjusting Request Headers ###
### Sending GET Requests ###
### Sending a PUT Request ###
### Transform Responses Easily with Observable Operators (`map()`) ###
### Using the Returned Data ###
### Catching Http Errors ###
### Using the "async" Pipe with Http Requests ###

## Course Project - Http ##
### Introduction ###
### Setting up Firebase as a Dummy Backend ###
### Sending PUT Requests to Save Data ###
### GETting Back the Recipes ###
### Transforming Response Data to Prefent Errors ###

## Authentication & Route Protection in Angular Apps ##
### Module Introduction ###
### How Authentication Works in Single-Page-Applications ###
### More about JWT ###
### Creation of Signup Page and Route ###
### Setting up the Firebase SDK ###
### Signing Users Up ###
### Signing Users In ###
### Requiring a Token (on the Backend) ###
### Sending the Token ###
### Checking and Using Authentication Status ###
### Adding a Logout Button ###
### Route Protection and Redirection Example ###
### Wrap Up ###
### Possible Improvements ###

## Using Angular Modules & Optimizing Apps ##
### Module Introduction ###
### The Idea behind Modules ###
### Understanding the App Module ###
### Understanding Feature Modules ###
### Creation of Recipe Feature Module ###
### Registering Routes in a Feature Module ###
### Understanding Shared Modules ###
### Creation of Shared Module ###
### Creation of a Shopping List Feature Module ###
### Loading Components via Selectors vs Routing ###
### A Common Gotcha ###
### Creation of Auth Feature Module ###
### Understanding Lazy Loading ###
### Adding Lazy Loading to the Recipes Module ###
### Protecting Lazy Loaded Routes with `canLoad` ###
### How Modules and Services Work Together ###
### Understanding the Core Module ###
### Creation of a Basic Core Module ###
### Restructuring Services to use the Child Injector ###
### Using Ahead-of-Time Compilation ###
### How to use AoT Compilation with the CLI ###
### Preloading Lazy Loaded Routes ###
### Wrap Up ###

## Deploying an Angular App ##
### Module Introduction ###
### Deployment Preparations and Important Steps ###
### Example: Deploying to AWS S3 ###

## Angular Animations ##
### Making Animations Work with Angular 4 ###
### Introduction ###
### Setting up the Starting Project ###
### Animations Triggers and State ###
### Switching between States ###
### Transitions ###
### Advanced Transitions ###
### Transition Phases ###
### The "void" State ###
### Using Keyframes for Animations ###
### Grouping Transitions ###
### Using Animation Callbacks ###

## A Basic Introduction to Unit Testing in Angualar Apps ##
### About this Section ###
### Introduction ###
### Why Unit Tests? ###
### Analyzing the Testing Setup (as created by the CLI) ###
### Running Tests (with the CLI) ###
### Adding a Component and some fitting Tests ###
### Testing Dependencies: Components and Services ###
### Simulating Async Tasks ###
### Using "fakeAsync" and "tick" ###
### Isolated vs Non-Isolated Tests ###
### Further Resources & Where to Go Next ###

## Course Roundup ##
### Course Roundup ###

## About the Course Update & Angular 4 ##
### What Changed with Angular 4? ###

## Custom Project & Workflow Setup ##
### Introduction ###
### Initializing the Project ###
### Setting up the Basic Project Files ###
### Installing the Core Dependencies ###
### Filling the Project Files with Some Life ###
### `index.html` & Polyfills ###
### Installing Development Dependencies ###
### Setting up a Development Workflow ###
### Finishing & Using the Development Workflow ###
### Setting up a Production Workflow ###
### Adding Types & Fixing Bugs ###
### Finishing Touches ###

## Bonus: TypeScript Introduction (for Angular 2 Usage) ##
### Introduction ###
### Using Types ###
### Classes ###
### Interfaces ###
### Generics ###
### Wrap up & Modules ###
### Deep dive into TypeScript ###
