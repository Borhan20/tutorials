<map version="1.0.1">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1567402580696" ID="ID_1781431964" MODIFIED="1567402869851" TEXT="Performance Engineering of Software Systems">
<node CREATED="1567402878017" ID="ID_623652772" MODIFIED="1567402888659" POSITION="right" TEXT="Lecture 1: Matrix Multiply: A Case Study">
<node CREATED="1567405647999" ID="ID_238839769" MODIFIED="1567405649887" TEXT="Example">
<node CREATED="1567405658997" ID="ID_1754616927" MODIFIED="1567405662334" TEXT="Matrix Multiply">
<node CREATED="1567405694157" ID="ID_1334207721" MODIFIED="1567405703332" TEXT="Methodology of improving performance"/>
<node CREATED="1567405720005" ID="ID_606585210" MODIFIED="1567405777745" TEXT="C(i, j) = sigma_k in [0, p] A(i, k) * B(k, j)">
<node CREATED="1567407340431" ID="ID_1343318255" MODIFIED="1567407351433" TEXT="Object oriented">
<node CREATED="1567407351873" ID="ID_224222816" MODIFIED="1567407354202" TEXT="Immutable"/>
<node CREATED="1567407358369" ID="ID_889270125" MODIFIED="1567407364916" TEXT="Represent integers and doubles">
<node CREATED="1567407421781" ID="ID_222216610" MODIFIED="1567407425284" TEXT="Matrix">
<node CREATED="1567407426020" ID="ID_787188191" MODIFIED="1567407428796" TEXT="Matrix Row">
<node CREATED="1567407434339" ID="ID_1944010894" MODIFIED="1567407438691" TEXT="Integer Row"/>
<node CREATED="1567407439721" ID="ID_54651071" MODIFIED="1567407441828" TEXT="Double Row"/>
</node>
<node CREATED="1567407429170" ID="ID_1899058964" MODIFIED="1567407430828" TEXT="Value"/>
<node CREATED="1567407746564" ID="ID_1011373573" MODIFIED="1567407750416" TEXT="Usage">
<node CREATED="1567407750758" ID="ID_419509442" MODIFIED="1567407766123" TEXT="Matrix A = new Matrix(x, y, MatrixType.FLOATING_POINT);"/>
</node>
<node CREATED="1567407795638" ID="ID_1973025024" MODIFIED="1567407797815" TEXT="Performance">
<node CREATED="1567407798042" ID="ID_901408772" MODIFIED="1567407804997" TEXT="1024 x 1024">
<node CREATED="1567407805461" ID="ID_1929731999" MODIFIED="1567407815222" TEXT="Is the performance good?">
<node CREATED="1567407815452" ID="ID_566004655" MODIFIED="1567407822196" TEXT="To know that we have a problem is a huge win"/>
</node>
<node CREATED="1567407826642" ID="ID_1901115535" MODIFIED="1567407828126" TEXT="5h">
<node CREATED="1567407833646" ID="ID_670126062" MODIFIED="1567407836109" TEXT="n^3"/>
</node>
</node>
</node>
<node CREATED="1567407859169" ID="ID_666131285" MODIFIED="1567407860936" TEXT="Steps">
<node CREATED="1567407861168" ID="ID_68462482" MODIFIED="1567407872720" TEXT="operations">
<node CREATED="1567407872952" ID="ID_1121541264" MODIFIED="1567407879137" TEXT="multiply"/>
<node CREATED="1567407881361" ID="ID_54856162" MODIFIED="1567407882097" TEXT="add"/>
<node CREATED="1567407882365" ID="ID_1886875377" MODIFIED="1567407885809" TEXT="3 index updates"/>
<node CREATED="1567407888700" ID="ID_741596728" MODIFIED="1567407891081" TEXT="branch check">
<node CREATED="1567407891367" ID="ID_537551488" MODIFIED="1567407893664" TEXT="6 ops"/>
</node>
</node>
</node>
<node CREATED="1567407920985" ID="ID_1013964202" MODIFIED="1567407924264" TEXT="Ops per second">
<node CREATED="1567407924599" ID="ID_1415994647" MODIFIED="1567407935791" TEXT="3.15 x 10^9 cycles/second">
<node CREATED="1567407940480" ID="ID_613021877" MODIFIED="1567407954801" TEXT="8358 cycles per each visible operation"/>
</node>
<node CREATED="1567407971706" ID="ID_1246581783" MODIFIED="1567407990341" TEXT="Back of the envelope">
<node CREATED="1567407993041" ID="ID_1816966975" MODIFIED="1567407997102" TEXT="Theoretically"/>
</node>
</node>
<node CREATED="1567408009716" ID="ID_489046302" MODIFIED="1567408019466" TEXT="How to improve the performance?">
<node CREATED="1567408019681" ID="ID_309361815" MODIFIED="1567408021781" TEXT="Profiling">
<node CREATED="1567408025453" ID="ID_1268191589" MODIFIED="1567408037981" TEXT="Look deeply into the program execution"/>
<node CREATED="1567408038388" ID="ID_1889642495" MODIFIED="1567408045711" TEXT="Find out where you are spending your time">
<node CREATED="1567408048754" ID="ID_1490506006" MODIFIED="1567408050389" TEXT="By method"/>
<node CREATED="1567408050595" ID="ID_1348927799" MODIFIED="1567408051886" TEXT="By line"/>
</node>
<node CREATED="1567408786433" ID="ID_806358196" MODIFIED="1567408793923" TEXT="Lot of interesting information">
<node CREATED="1567408795252" ID="ID_1865415898" MODIFIED="1567408798989" TEXT="Time spent"/>
<node CREATED="1567408800086" ID="ID_1004023114" MODIFIED="1567408805236" TEXT="Cumulative time spent"/>
<node CREATED="1567408805603" ID="ID_740815665" MODIFIED="1567408810101" TEXT="Number of invocations"/>
<node CREATED="1567408810310" ID="ID_1277926103" MODIFIED="1567408813524" TEXT="..."/>
</node>
<node CREATED="1567408860866" ID="ID_1557109210" MODIFIED="1567408872313" TEXT="Great way to zero in on what matters - Hotspots">
<node CREATED="1567408874454" ID="ID_1741084867" MODIFIED="1567408902047" TEXT="If 90% time is in one routine, inefficiencies in the rest of the program doesn&apos;t matter"/>
<node CREATED="1567408903374" ID="ID_1718600699" MODIFIED="1567408917711" TEXT="Also, is the hotspots doing what you expect them to do?"/>
</node>
<node CREATED="1567408937805" ID="ID_745504832" MODIFIED="1567408952607" TEXT="Results">
<node CREATED="1567408952852" ID="ID_1703920268" MODIFIED="1567408962456" TEXT="Most time is spent in creation of doubles">
<node CREATED="1567408962735" ID="ID_508814554" MODIFIED="1567408969799" TEXT="number of calls is huge">
<node CREATED="1567408970163" ID="ID_1289745831" MODIFIED="1567408976614" TEXT="3,157,263"/>
<node CREATED="1567408979986" ID="ID_804519959" MODIFIED="1567408982183" TEXT="Method time">
<node CREATED="1567408982380" ID="ID_666566276" MODIFIED="1567408987386" TEXT="53,100"/>
</node>
</node>
<node CREATED="1567409020971" ID="ID_619503453" MODIFIED="1567409025167" TEXT="What is the problem?">
<node CREATED="1567409025365" ID="ID_129743502" MODIFIED="1567409036101" TEXT="Why am I initializing values if I am just multiplying?">
<node CREATED="1567409053549" ID="ID_486837742" MODIFIED="1567409055165" TEXT="Issue?">
<node CREATED="1567409055349" ID="ID_617218445" MODIFIED="1567409059158" TEXT="Immutability">
<node CREATED="1567409062102" ID="ID_1030301229" MODIFIED="1567409075424" TEXT="Update one location -&gt; copy of the matrix">
<node CREATED="1567409099628" ID="ID_1709413409" MODIFIED="1567409127340" TEXT="If a value in a row needs to be changed then copy only that row ">
<node CREATED="1567409145372" ID="ID_588694883" MODIFIED="1567409152394" TEXT="2 * N copies for each update">
<node CREATED="1567409173102" ID="ID_214791414" MODIFIED="1567409182707" TEXT="N^3 updates -&gt; N^4 copies are made">
<node CREATED="1567409205245" ID="ID_435741214" MODIFIED="1567409207804" TEXT="Problems">
<node CREATED="1567409208022" ID="ID_1002979442" MODIFIED="1567409212708" TEXT="Cost of making duplicates"/>
<node CREATED="1567409212915" ID="ID_1146873246" MODIFIED="1567409222171" TEXT="Cost of garbage collecting the freed objects"/>
<node CREATED="1567409222361" ID="ID_1738731567" MODIFIED="1567409227285" TEXT="Huge memory footprint"/>
</node>
<node CREATED="1567409245654" ID="ID_1298759192" MODIFIED="1567409250328" TEXT="Solution">
<node CREATED="1567409250853" ID="ID_1380745681" MODIFIED="1567409254445" TEXT="Can we do better?">
<node CREATED="1567409254726" ID="ID_1432015815" MODIFIED="1567409261047" TEXT="Get rid of immutability">
<node CREATED="1567409307746" ID="ID_1867595222" MODIFIED="1567409313519" TEXT="Performance improvement">
<node CREATED="1567409313774" ID="ID_806550182" MODIFIED="1567409321996" TEXT="219.7x">
<node CREATED="1567427395932" ID="ID_943808385" MODIFIED="1567427401978" TEXT="N^4 -&gt; N^3"/>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1567409285651" ID="ID_1614526215" MODIFIED="1567409290589" TEXT="Object oriented"/>
</node>
</node>
<node CREATED="1567430549844" ID="ID_1727175437" MODIFIED="1567430561176" TEXT="Time spent for get double and get">
<node CREATED="1567430570069" ID="ID_879209000" MODIFIED="1567430582529" TEXT="Issues are with Dynamic Dispatch">
<node CREATED="1567430583640" ID="ID_876683597" MODIFIED="1567430587185" TEXT="Method call overhead">
<node CREATED="1567430587557" ID="ID_1872554769" MODIFIED="1567430600512" TEXT="Multiple subtypes -&gt; what method to call depends on the object"/>
<node CREATED="1567430601113" ID="ID_1461426828" MODIFIED="1567430619425" TEXT="Each method call needs to loop-up the object type in a dispatch table">
<node CREATED="1567430690813" ID="ID_1254914338" MODIFIED="1567430698029" TEXT="Indirect branches are costly">
<node CREATED="1567430698306" ID="ID_716887021" MODIFIED="1567430706585" TEXT="Modern microprocessors are deeply pipelined">
<node CREATED="1567430706849" ID="ID_1294551298" MODIFIED="1567430719562" TEXT="12 pipeline stages in core 2 duo, 20 in Pentium 4"/>
<node CREATED="1567430732329" ID="ID_954459501" MODIFIED="1567430741266" TEXT="i.e. hundreds of instructions in flight">
<node CREATED="1567430886610" ID="ID_425295716" MODIFIED="1567430896568" TEXT="I cannot go further until the previous instruction is resolved">
<node CREATED="1567430899931" ID="ID_105429145" MODIFIED="1567430905386" TEXT="Machine slows down a lot">
<node CREATED="1567430927420" ID="ID_1301708216" MODIFIED="1567430940762" TEXT="We need to fetch, test, and only then fetch the next instruction"/>
</node>
</node>
</node>
</node>
<node CREATED="1567430842740" ID="ID_1430186684" MODIFIED="1567430853842" TEXT="I don&apos;t know where I am going until I do that check"/>
</node>
<node CREATED="1567430968735" ID="ID_1686071953" MODIFIED="1567430973157" TEXT="Direct branch">
<node CREATED="1567431049929" ID="ID_376410051" MODIFIED="1567431069832" TEXT="Target address is known">
<node CREATED="1567431070219" ID="ID_912290701" MODIFIED="1567431078889" TEXT="We can fetch ahead from target"/>
</node>
<node CREATED="1567431092228" ID="ID_498042147" MODIFIED="1567431104812" TEXT="works for conditional branches by predicting the branch">
<node CREATED="1567431264943" ID="ID_510348019" MODIFIED="1567431275796" TEXT="We can also fetch both options"/>
</node>
</node>
<node CREATED="1567431008075" ID="ID_1184695838" MODIFIED="1567431012264" TEXT="Normal instructions">
<node CREATED="1567431012580" ID="ID_416146515" MODIFIED="1567431019902" TEXT="keep fetching the next instructions"/>
<node CREATED="1567430973390" ID="ID_423368039" MODIFIED="1567431007800" TEXT="Need to be able to keep fetching next instructions before executing them"/>
</node>
<node CREATED="1567431218977" ID="ID_527348539" MODIFIED="1567431223056" TEXT="Indirect branch">
<node CREATED="1567431223392" ID="ID_253582066" MODIFIED="1567431228638" TEXT="target is unknown">
<node CREATED="1567431229805" ID="ID_112089563" MODIFIED="1567431239035" TEXT="need to wait until address fetch completes"/>
</node>
</node>
<node CREATED="1567432663365" ID="ID_336521909" MODIFIED="1567432666023" TEXT="Solution">
<node CREATED="1567432666376" ID="ID_54501713" MODIFIED="1567432690000" TEXT="integers, doubles -&gt; doubles only">
<node CREATED="1567432714606" ID="ID_1335657089" MODIFIED="1567432717839" TEXT="Improvement">
<node CREATED="1567432718032" ID="ID_980449002" MODIFIED="1567432720479" TEXT="2.4x"/>
</node>
</node>
</node>
</node>
<node CREATED="1567430624474" ID="ID_1970175657" MODIFIED="1567430637898" TEXT="Dynamic dispatch is an address lookup + indirect branch">
<node CREATED="1567430825049" ID="ID_1953530014" MODIFIED="1567430833514" TEXT="Direct call has become indirect branch"/>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1567408824170" ID="ID_1818213271" MODIFIED="1567408827164" TEXT="Intuition">
<node CREATED="1567408827509" ID="ID_1405156688" MODIFIED="1567408836178" TEXT="We usually have a feel for what it should be"/>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1567402889721" ID="ID_1361347997" MODIFIED="1567402895165" POSITION="left" TEXT="Lecture 2: Bit Hacks"/>
<node CREATED="1567402896203" ID="ID_913810876" MODIFIED="1567402912236" POSITION="right" TEXT="Lecture 3: Basic Performance Engineering"/>
<node CREATED="1567402913106" ID="ID_1551470920" MODIFIED="1567402926423" POSITION="left" TEXT="Lecture 4: Computer Architecture and Performance Engineering"/>
<node CREATED="1567402931195" ID="ID_641670157" MODIFIED="1567402940850" POSITION="right" TEXT="Industry Mentor (MITPOSSE) Overview"/>
<node CREATED="1567402941694" ID="ID_996522732" MODIFIED="1567403050208" POSITION="left" TEXT="Lecture 5: Performance Engineering with Profiling Tools"/>
<node CREATED="1567403051232" ID="ID_296759086" MODIFIED="1567403058145" POSITION="right" TEXT="Lecture 6: C to Assembly"/>
<node CREATED="1567403058986" ID="ID_350746129" MODIFIED="1567403076238" POSITION="left" TEXT="Lecture 7: Memory Systems and Performance Engineering"/>
<node CREATED="1567403076941" ID="ID_1564873114" MODIFIED="1567403087516" POSITION="right" TEXT="Lecture 8: Cache-Efficient Algorithms"/>
<node CREATED="1567403088643" ID="ID_1879959287" MODIFIED="1567403097881" POSITION="left" TEXT="Lecture 9: Cache-Efficient Algorithms II"/>
<node CREATED="1567403098608" ID="ID_1564012290" MODIFIED="1567403109363" POSITION="right" TEXT="Lecture 10: Dynamic Storage Allocation"/>
<node CREATED="1567403110147" ID="ID_1457262281" MODIFIED="1567403122688" POSITION="left" TEXT="Lecture 11: What Compilers Can and Cannot Do"/>
<node CREATED="1567403123377" ID="ID_914714952" MODIFIED="1567403130915" POSITION="right" TEXT="Lecture 12: Multicore Programming"/>
<node CREATED="1567403131623" ID="ID_130962530" MODIFIED="1567403140162" POSITION="left" TEXT="Lecture 13: Parallelism and Performance"/>
<node CREATED="1567403140738" ID="ID_502296409" MODIFIED="1567403154771" POSITION="right" TEXT="Lecture 14: Analysis of Multithreaded Algorithms"/>
<node CREATED="1567403157634" ID="ID_524167238" MODIFIED="1567403166442" POSITION="left" TEXT="Lecture 15: Nondeterministic Programming"/>
<node CREATED="1567403247084" ID="ID_1543284942" MODIFIED="1567403256229" POSITION="right" TEXT="Lecture 16: Synchronizing without Locks"/>
<node CREATED="1567403257028" ID="ID_1425318579" MODIFIED="1567403265817" POSITION="left" TEXT="Lecture 17: Performance Issues in Parallelism"/>
<node CREATED="1567403266403" ID="ID_1758894819" MODIFIED="1567403278856" POSITION="right" TEXT="Lecture 18: Primer on Ray Tracing Techniques"/>
<node CREATED="1567403282043" ID="ID_685681834" MODIFIED="1567403294774" POSITION="left" TEXT="Lecture 19: How TokuDB Fractal Tree Indexes Work"/>
<node CREATED="1567403295460" ID="ID_927821344" MODIFIED="1567403302893" POSITION="right" TEXT="Lecture 20: Distributed Systems"/>
<node CREATED="1567403303546" ID="ID_683497069" MODIFIED="1567403311096" POSITION="left" TEXT="Lecture 21: Quiz 2 Review"/>
<node CREATED="1567403311731" ID="ID_1945287518" MODIFIED="1567403331721" POSITION="right" TEXT="Lecture 22: A Tale of 10 Bugs: Performance Engineering at VMware"/>
<node CREATED="1567403332479" ID="ID_126815055" MODIFIED="1567403343191" POSITION="left" TEXT="Lecture 23: Final Competition and Student Feedback"/>
</node>
</map>
