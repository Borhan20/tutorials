{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue10;\red255\green255\blue10;\red255\green255\blue255;
\red251\green2\blue7;\red33\green255\blue6;}
{\*\expandedcolortbl;;\cssrgb\c99942\c98555\c0;\cssrgb\c99942\c98555\c0;\cssrgb\c100000\c100000\c100000;
\cssrgb\c100000\c14913\c0;\cssrgb\c0\c97680\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12600\viewh13700\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\i\b\fs24 \cf0 \ul \ulc0 Boeing:
\i0\b0 \ulnone \
\cb2 1. Python scripting (needs review)\cb1 \
\cb2 2. Python programming (needs review)\cb1 \
3. REST using Python (not much)\
4. Databases: \cb3 PostgreSQL\cb1 , MongoDB, MySQL (not much) - \cb2 (PostgreSQL Tutorial)\cb1 \
5. \cb3 Database design\cb1 , troubleshooting, management (very minimal) - \cb2 (Database Design Udemy course)\cb1 \
6. HTML\
7. CSS\
8. Javascript\
9. Web APIs\
10. JSON\
11. SPAs\
\cf4 \cb5 12. PWAs\cf0 \cb1 \
\cf4 \cb5 13. RWDs (Responsive Web Design)\cf0 \cb1 \
\cf4 \cb5 14. Webpack\cf0 \cb1 \
\cf4 \cb5 15. Babel\cf0 \cb1 \
\cf4 \cb5 16. Gulp\cf0 \cb1 \
17. npm\
18. \'85\
\cb6 19. Java/ J2EE\cb1 \
20. Spring\
\cf4 \cb5 21. JSF\cf0 \cb1 \
22. JMS\
\cb6 23. JPA / Hibernate\cb1 \
\cb2 24. Application Server (WebLogic)\cb1 \
\cb2 25. Docker/ Kubernetes (not much) - (DevOps Tools \'85 Udemy course)\cb1 \
26. Maven\
\cb2 27. Gradle (not much) - (Grade Udemy course)\cb1 \
28. JUnit\
29. Sonar\
30. \'85\
31. Node.js\
\cb2 32. Redux (not much)\cb1 \
\cb3 33. REST API principles\cb1 \
34. Web and Mobile Application (not much)\
35. Scrum/ Agile\
36. Cloud\
37. CI (GitLab CI, Jenkins, or Nexus)\
\cb3 38. Pair programming - (Martin Fowler\'92s pair programming)\cb1 \
\cb3 39. Test-driven development\cb1 \
40. CI\
\cb2 41. XP (no idea) - (Martin Fowler\'92s XP)\cb1 \
42. SaaS software development\
\cb2 43. Containerised micro services on Linux Platforms on Linux platforms (not much)\cb3  - (DevOps Tools \'85 Udemy course)\cb1 \
\cb2 44. Scalability, availability, low-latency distributed systems (not much) - (System Design Book)\cb1 \
\

\i\b \ul Amazon
\i0\b0 \ulnone \
1. \cb6 Java\cb1  or C++ or C#\
2. \cb6 Architecture and Design\cb2  - (System Design Book)\cb1 \
	1. \cb3 Architecture\cb1 \
	2. \cb3 Design patterns\cb1 \
	3. \cb3 Reliability\cb1 \
	4. \cb3 Scaling\cb1 \
3. Building:\cb3  - (System Design Book)\cb1 \
	1. \cb3 Complex software systems\cb1 \
	2. \cb3 Highly scalable software systems\cb1 \
	3. \cb6 Delivered to customers\cb1 \
4. \cb3 Mobile platforms - (Android N course)\cb1 \
	1. Google Android\
5. \cb3 HW/SW design and architecture\cb1 \
6. \cb3 Graphics: UI Composition and Fluidity for mobile apps\cb1 \
7. \cb3 AWS - (DevOps tools \'85 Udemy Course)\cb1 \
8. Alexa Skills development\
9. \cb6 Professional practices\cb2  (Martin Fowler\'92s Articles, Clean Code)\cb1 \
	1. \cb3 SDLC\cb1 \
	2. \cb3 Coding standards\cb1 \
	3. \cb3 Code reviews\cb1 \
	4. SCM\
	5. Build processes\
	6. Testing\
	7. Operations\
\

\i\b \ul PayPal (Software Architect)\

\i0\b0 \ulnone 1. Problem solving of complex & large scale problems\cb2  - (System Design Book)\cb1 \
2. \cb3 Data structures & algorithms - (Graph Algorithms Udemy Course, Leetcode)\cb1 \
3. Exposure to problem spaces & technologies\
4. \cb3 System design & OO skills - (System Design Book)\cb1 \
5. \cb3 Crafting clean interfaces\cb1 \
6. \cb3 Operate at right levels of abstraction - (Clean Code Book)\cb1 \
7. \cb3 Coding skills - (Leetcode, Projects)\cb1 \
8. \cb3 Drive teams through massive refactoring exercise - (Refactoring Tutorial)\cb1 \
9. \cb3 Improve coding standards across large code bases - (Martin Fowler\'92s articles, Clean code Book)\cb1 \
10. \cb3 Multi-tier architectures\cb1 \
11. \cb3 High performance micro-service scale\cb1  and \cb3 real-time response systems\cb1 \
12. Large scale persistent systems (databases)\cb2  - (System Design Book)\cb1 \
13. Product development lifecycle (inception to production, scaling up, new requirements, re-architectures)\
14. Large data handling or large transaction processing exposure\cb3  - (System Design Book, Streaming Data?, Big Data?)\cb1 \
15. \cb3 Mentoring\cb1 \
16. \cb3 Translate business requirements to functional specs\cb1 \
17. Lead team: \cb3 code reviews\cb1 , design approach, implementation\
18. Implementation, testing and deployment of web apps - with accessibility & internationalisation\
19. Collaboration with multiple teams for innovative solutions to business requirements\
\

\i\b \ul JP Morgan\

\i0\b0 \ulnone 1. Innovation\
2. Business analysis, development, maintenance, software improvement\cb2  - (Clean code book, Martin Fowler\'92s articles)\cb1  \
3. Java\
4. Spring\
5. J2EE\
\cb2 6. Database (SQL server or Oracle)\cb1 \
\cb2 7. Python\cb1 \
\cb2 8. Micro Services\cb1 \
\cb2 9. Cloud Computing\cb1 \
\

\i\b \ul Siemens
\i0\b0 \ulnone \
1. Produce architectural concepts\
2. Architecture meets business requirements\
3. Derive technical roadmap\
\cb2 4. Propose tech alternatives - (Learn Tools)\cb1 \
\cb2 5. Derive work packages & user stories from requirements - (TOGAF)\cb1 \
6. Support project planning\
	1. Estimation\
	2. Identification of integration points\
	3. Technical risks & mitigation\
7. Ensure testable design & test-automation design\
8. Participate in validation of implemented features\
9. Evaluate tools, technologies\cb3  - (Learn Tools)\cb1 \
10. Perform prototypes\
11. Coach and mentor project team regarding\
	1. Software design approach\cb2  - (Refactoring Tutorial)\cb1 \
	2. Technology\
	3. Tools\
	4. Methods\
	5. Software quality aspects\
12. Develop frameworks (if required) & code implementation for solution\
13. Advise in make or buy decisions\
\
1. 10+ years in Software Development\
2. 2 years as Software Architect\
3. App development on Windows and Linux platforms\
4. Design principles, tools, methods\
5. Distributed computing architectures, communication paradigms\
	1. REST\
	2. Web-Services\
	3. Microservices\
	4. \'85\
\cf4 \cb5 6. ESOA Platform (optional)\cf0 \cb1 \
7. Languages & toolkits:\
	1. Java\
	2. SQL\
	\cb2 3. BigData/ NoSQL\cb1 \
	4. REST APIs\
	5. HTML/ CSS\
	6. Angular/\cb2  React - (React Course, React Books, React Documentation)\cb1 \
	7. NodeJS\
	8. Python\
	9. Webservers\
	\cb2 10. Cloud-based apps/ services (AWS) - (DevOps tools \'85 Udemy Course)\cb1 \
	11. Architectural & design patterns\
	12. Modelling tools\
\

\i\b \ul PayPal (Software Engineer 3)
\i0\b0 \ulnone \
1. RESTful endpoints or other SOA endpoints\
2. Backend services in Java, Spring, Hibernate\
3. Java (others - C++, Python)\
4. Data Structures, Algorithmic techniques, Design patterns, best coding practices\
5. Curiosity of how things work and finding answers (adaptable to changing circumstances)\
\cb3 6. Relational Databases & NoSQL databases\cb1 \
\cb3 7. Scalable and distributed Java services (to millions of users)\cb1 \
8. GitHub account or code samples with resume\
\

\i\b \ul Intel\

\i0\b0 \ulnone 1. C/C++ & Python in Linux\
2. AI & ML + Frameworks (Pytorch/ Tensorflow)\
3. Graph Theory & Graph Compilation\
4. Linux Device Drivers (User/ Kernel modes)\
5. Isolation of HW & SW issues quickly + Tools (GDB, Lauterbach)\
6. Linux based system software for AI data centre product line\
7. HW features from data sheets\
8. Agile\
9. CI-CD + Jenkins \'85\
\

\i\b \ul Walmart\

\i0\b0 \ulnone 1. Data Structures\
2. Algorithms\
3. Design Patterns\
4. Java\
5. Spring Boot\
6. Microservices\
7. Node Js\
8. Cloud Architecture (Azure)\
9. Microservice Architecture\
	1. Service Registry\
	2. ELK/ Splunk\
	3. Microservices\
	4. VMs\
	5. \'85\
10. Container Technologies:\
	1. Docker\
	2. Kubernetes\
11. Agile methodologies\
12. DevOps\
13. CI-CD tools\
	1. Git\
	2. Maven\
	3. Jenkins\
	4. Docker\
	5. Kubernetes\
	6. Chef\
14. End-to-end ownership for development and design of one cloud based project\
15. Working knowledge of SQL & NoSQL\
	1. MySQL\
	2. Mongo DB\
	3. HBase\
	4. Cassandra\
	5. Oracle\
	6. PostgreSQL\
	7. Big Query\
16. TDD\
	1. JUnit\
	2. TestNG\
17. BDD\
	1. Cucumber\
	2. CI/CD .Karate\
	3. \'85\
18. Prototype technical solutions\
19. New and emerging tech\
20. Long term and short term design decisions}