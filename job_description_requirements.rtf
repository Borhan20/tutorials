{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue10;\red33\green255\blue6;\red33\green255\blue6;
}
{\*\expandedcolortbl;;\cssrgb\c99942\c98555\c0;\cssrgb\c0\c97680\c0;\cssrgb\c0\c97680\c0;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww12600\viewh13700\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\i\b\fs24 \cf0 \ul \ulc0 Boeing:
\i0\b0 \ulnone \
1. Python scripting (needs review)\
2. Python programming (needs review)\
3. REST using Python (not much)\
4. Databases: \cb2 PostgreSQL\cb1 , MongoDB, MySQL (not much)\
5. \cb2 Database design\cb1 , troubleshooting, management (very minimal)\
6. HTML\
7. CSS\
8. Javascript\
9. Web APIs\
10. JSON\
11. SPAs\
12. PWAs\
13. RWDs (Responsive Web Design)\
14. Webpack\
15. Babel\
16. Gulp\
17. npm\
18. \'85\
\cb3 19. Java/ J2EE\cb1 \
20. Spring\
21. JSF\
22. JMS\
\cb3 23. JPA / Hibernate\cb1 \
24. Application Server\
25. Docker/ Kubernetes (not much)\
26. Maven\
27. Gradle (not much)\
28. JUnit\
29. Sonar\
30. \'85\
31. Node.js\
32. Redux (not much)\
\cb2 33. REST API principles\cb1 \
34. Web and Mobile Application (not much)\
35. Scrum/ Agile\
36. Cloud\
37. CI (GitLab CI, Jenkins, or Nexus)\
\cb2 38. Pair programming\cb1 \
\cb2 39. Test-driven development\cb1 \
40. CI\
41. XP (no idea)\
42. SaaS software development (no idea)\
43. Containerised micro services on Linux Platforms on Linux platforms (not much)\
44. Scalability, availability, low-latency distributed systems (not much)\
\

\i\b \ul Amazon
\i0\b0 \ulnone \
1. \cb4 Java\cb1  or C++ or C#\
2. \cb4 Architecture and Design\cb1 \
	1. \cb2 Architecture\cb1 \
	2. \cb2 Design patterns\cb1 \
	3. \cb2 Reliability\cb1 \
	4. \cb2 Scaling\cb1 \
3. Building:\
	1. \cb2 Complex software systems\cb1 \
	2. \cb2 Highly scalable software systems\cb1 \
	3. \cb4 Delivered to customers\cb1 \
4. \cb2 Mobile platforms\cb1 \
	1. Google Android\
5. \cb2 HW/SW design and architecture\cb1 \
6. \cb2 Graphics: UI Composition and Fluidity for mobile apps\cb1 \
7. \cb2 AWS\cb1 \
8. Alexa Skills development\
9. \cb4 Professional practices\cb1 \
	1. \cb2 SDLC\cb1 \
	2. \cb2 Coding standards\cb1 \
	3. \cb2 Code reviews\cb1 \
	4. SCM\
	5. Build processes\
	6. Testing\
	7. Operations\
\

\i\b \ul PayPal (Software Architect)\

\i0\b0 \ulnone 1. Problem solving of complex & large scale problems\
2. \cb2 Data structures & algorithms\cb1 \
3. Exposure to problem spaces & technologies\
4. \cb2 System design & OO skills\cb1 \
5. \cb2 Crafting clean interfaces\cb1 \
6. \cb2 Operate at right levels of abstraction\cb1 \
7. \cb2 Coding skills\cb1 \
8. \cb2 Drive teams through massive refactoring exercise\cb1 \
9. \cb2 Improve coding standards across large code bases\cb1 \
10. \cb2 Multi-tier architectures\cb1 \
11. \cb2 High performance micro-service scale\cb1  and \cb2 real-time response systems\cb1 \
12. Large scale persistent systems (databases)\
13. Product development lifecycle (inception to production, scaling up, new requirements, re-architectures)\
14. Large data handling or large transaction processing exposure\
15. \cb2 Mentoring\cb1 \
16. \cb2 Translate business requirements to functional specs\cb1 \
17. Lead team: \cb2 code reviews\cb1 , design approach, implementation\
18. Implementation, testing and deployment of web apps - with accessibility & internationalisation\
19. Collaboration with multiple teams for innovative solutions to business requirements\
\

\i\b \ul JP Morgan\

\i0\b0 \ulnone 1. Innovation\
2. Business analysis, development, maintenance, software improvement\
3. Java\
4. Spring\
5. J2EE\
6. Database (SQL server or Oracle)\
7. Python\
8. Micro Services\
9. Cloud Computing\
\

\i\b \ul Siemens
\i0\b0 \ulnone \
1. Produce architectural concepts\
2. Architecture meets business requirements\
3. Derive technical roadmap\
4. Propose tech alternatives\
5. Derive work packages & user stories from requirements\
6. Support project planning\
	1. Estimation\
	2. Identification of integration points\
	3. Technical risks & mitigation\
7. Ensure testable design & test-automation design\
8. Participate in validation of implemented features\
9. Evaluate tools, technologies\
10. Perform prototypes\
11. Coach and mentor project team regarding\
	1. Software design approach\
	2. Technology\
	3. Tools\
	4. Methods\
	5. Software quality aspects\
12. Develop frameworks (if required) & code implementation for solution\
13. Advise in make or buy decisions\
\
1. 10+ years in Software Development\
2. 2 years as Software Architect\
3. App development on Windows and Linux platforms\
4. Design principles, tools, methods\
5. Distributed computing architectures, communication paradigms\
	1. REST\
	2. Web-Services\
	3. Microservices\
	4. \'85\
6. ESOA Platform (optional)\
7. Languages & toolkits:\
	1. Java\
	2. SQL\
	3. BigData/ NoSQL\
	4. REST APIs\
	5. HTML/ CSS\
	6. Angular/ React\
	7. NodeJS\
	8. Python\
	9. Webservers\
	10. Cloud-based apps/ services (AWS)\
	11. Architectural & design patterns\
	12. Modelling tools\
\

\i\b \ul PayPal (Software Engineer 3)
\i0\b0 \ulnone \
1. RESTful endpoints or other SOA endpoints\
2. Backend services in Java, Spring, Hibernate\
3. Java (others - C++, Python)\
4. Data Structures, Algorithmic techniques, Design patterns, best coding practices\
5. Curiosity of how things work and finding answers (adaptable to changing circumstances)\
\cb2 6. Relational Databases & NoSQL databases\cb1 \
\cb2 7. Scalable and distributed Java services (to millions of users)\cb1 \
8. GitHub account or code samples with resume\
\

\i\b \ul Intel\

\i0\b0 \ulnone 1. C/C++ & Python in Linux\
2. AI & ML + Frameworks (Pytorch/ Tensorflow)\
3. Graph Theory & Graph Compilation\
4. Linux Device Drivers (User/ Kernel modes)\
5. Isolation of HW & SW issues quickly + Tools (GDB, Lauterbach)\
6. Linux based system software for AI data centre product line\
7. HW features from data sheets\
8. Agile\
9. CI-CD + Jenkins \'85}